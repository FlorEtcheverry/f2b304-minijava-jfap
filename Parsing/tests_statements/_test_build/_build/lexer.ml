# 1 "lexer.mll"
 
	(* ocaml code *)
	open Parser
	open Printf
	open Lexing

	exception Syntax_error of string
	
	(* increment the line number *)
	let incr_lineno lexbuf =
		let pos = lexbuf.lex_curr_p in
		lexbuf.lex_curr_p <- 
			{ 
				pos with 
				pos_lnum = pos.pos_lnum + 1;
				pos_bol = pos.pos_cnum; 
			}
	(* use a hashtable to store keywords *)
	let create_hashtable size init = 
		let tbl = Hashtbl.create size in 
		List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
		tbl

	(* use a list to store the keywords *)
	let kw_table = 
		[
	 	 "abstract", ABSTRACT ;
		 "assert", ASSERT ;
		 "boolean", BOOLEAN ;
		 "break", BREAK ;
		 "byte", BYTE ;
		 "case", CASE ;
		 "catch", CATCH ;
		 "char", CHAR ;
		 "class", CLASS ;
		 "const", CONST ;
		 "continue", CONTINUE ;
		 "default", DEFAULT ;
		 "do", DO ;
		 "double", DOUBLE ;
		 "else", ELSE ;
		 "enum", ENUM ;
		 "extends", EXTENDS ;
		 "final", FINAL ;
		 "finally", FINALLY ;
		 "float", FLOAT ;
		 "for", FOR ;
		 "if", IF ;
		 "goto", GOTO ;
		 "implements", IMPLEMENTS ;
		 "import", IMPORT ;
		 "instanceof", INSTANCEOF ;
		 "int", INT ;
		 "interface", INTERFACE ;
		 "long", LONG ;
		 "native", NATIVE ;
		 "new", NEW ;
		 "switch", SWITCH ;
		 "synchronized", SYNCHRONIZED ;
		 "package", PACKAGE ;
		 "private", PRIVATE ;
		 "this", THIS ;
		 "protected", PROTECTED ;
		 "throw", THROW ;
		 "public", PUBLIC ;
		 "throws", THROWS ;
		 "return", RETURN ;
		 "transient", TRANSIENT ;
		 "short", SHORT ;
		 "try", TRY ;
		 "static", STATIC ;
		 "void", VOID ;
		 "strictfp", STRICTFP ;
		 "volatile", VOLATILE ;
		 "super", SUPER ;
		 "while", WHILE ;
		] 

# 81 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\193\255\194\255\091\000\192\000\023\001\110\001\168\000\
    \202\255\203\255\204\255\205\255\206\255\207\255\208\255\209\255\
    \122\000\211\255\214\255\003\000\031\000\238\255\090\000\126\000\
    \035\000\068\000\073\000\075\000\076\000\190\000\191\000\168\001\
    \115\000\020\001\003\000\001\000\255\255\222\255\252\255\172\000\
    \004\000\253\255\251\255\116\000\226\001\099\000\250\255\225\255\
    \237\255\224\255\236\255\223\255\221\255\227\255\091\000\216\255\
    \228\255\122\000\217\255\092\000\215\255\232\255\219\255\234\255\
    \220\255\235\255\218\255\231\255\201\255\223\000\055\001\045\002\
    \198\255\199\255\073\002\083\002\055\002\121\002\208\002\039\003\
    \126\003\213\003\044\004\131\004\218\004\049\005\160\001\253\255\
    \005\000\254\255\108\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\060\000\060\000\060\000\060\000\055\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \045\000\255\255\255\255\029\000\022\000\255\255\016\000\015\000\
    \014\000\026\000\025\000\010\000\009\000\007\000\006\000\061\000\
    \061\000\008\000\001\000\000\000\255\255\255\255\255\255\255\255\
    \002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\011\000\255\255\
    \255\255\012\000\255\255\013\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\056\000\
    \255\255\255\255\255\255\056\000\255\255\060\000\060\000\058\000\
    \060\000\060\000\060\000\060\000\060\000\059\000\255\255\255\255\
    \001\000\255\255\002\000\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \043\000\255\255\255\255\255\255\000\000\000\000\000\000\039\000\
    \255\255\000\000\000\000\043\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\087\000\000\000\
    \255\255\000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\034\000\036\000\036\000\034\000\035\000\041\000\089\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \034\000\024\000\032\000\034\000\003\000\027\000\022\000\031\000\
    \015\000\014\000\028\000\030\000\009\000\029\000\010\000\033\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\008\000\011\000\026\000\019\000\025\000\018\000\
    \067\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\016\000\066\000\017\000\020\000\003\000\
    \061\000\003\000\003\000\003\000\003\000\003\000\005\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\004\000\003\000\
    \003\000\003\000\003\000\003\000\006\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\012\000\023\000\013\000\021\000\003\000\
    \065\000\056\000\057\000\070\000\070\000\054\000\053\000\069\000\
    \052\000\051\000\046\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\042\000\042\000\064\000\
    \055\000\060\000\070\000\091\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\041\000\058\000\
    \059\000\040\000\003\000\062\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\071\000\068\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\000\000\000\000\003\000\000\000\000\000\000\000\
    \070\000\070\000\048\000\050\000\069\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\063\000\049\000\047\000\000\000\000\000\070\000\
    \001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\083\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\068\000\000\000\038\000\000\000\
    \070\000\070\000\000\000\039\000\069\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\037\000\000\000\000\000\000\000\000\000\000\000\070\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\255\255\255\255\000\000\003\000\000\000\
    \080\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\068\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\089\000\000\000\255\255\088\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\090\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \077\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\000\000\044\000\000\000\000\000\000\000\
    \000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\073\000\074\000\072\000\076\000\000\000\076\000\000\000\
    \000\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\000\000\000\000\000\000\
    \000\000\073\000\074\000\072\000\000\000\000\000\000\000\073\000\
    \000\000\072\000\000\000\000\000\000\000\003\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\073\000\
    \000\000\072\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\078\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\079\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\081\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\003\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \082\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\003\000\003\000\003\000\
    \003\000\079\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\084\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\003\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\085\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\035\000\034\000\000\000\040\000\088\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
    \024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \022\000\025\000\025\000\016\000\016\000\026\000\026\000\016\000\
    \027\000\028\000\045\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\032\000\043\000\022\000\
    \054\000\059\000\016\000\090\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\039\000\057\000\
    \057\000\039\000\003\000\023\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\007\000\016\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\255\255\255\255\004\000\255\255\255\255\255\255\
    \069\000\069\000\030\000\029\000\069\000\255\255\255\255\255\255\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\023\000\029\000\030\000\255\255\255\255\069\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\004\000\
    \255\255\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\005\000\069\000\255\255\033\000\255\255\
    \070\000\070\000\255\255\033\000\070\000\255\255\255\255\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\033\000\255\255\255\255\255\255\255\255\255\255\070\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\255\255\032\000\043\000\255\255\005\000\255\255\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\006\000\255\255\070\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \255\255\255\255\086\000\255\255\039\000\086\000\255\255\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\255\255\086\000\255\255\255\255\006\000\255\255\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\255\255\031\000\255\255\255\255\255\255\
    \255\255\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\071\000\071\000\071\000\074\000\255\255\074\000\255\255\
    \255\255\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\255\255\255\255\255\255\
    \255\255\071\000\071\000\071\000\255\255\255\255\255\255\075\000\
    \255\255\075\000\255\255\255\255\255\255\077\000\255\255\255\255\
    \086\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\255\255\255\255\255\255\255\255\075\000\
    \255\255\075\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\255\255\255\255\255\255\255\255\
    \077\000\255\255\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\078\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\255\255\255\255\255\255\255\255\078\000\
    \255\255\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\079\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\255\255\255\255\255\255\255\255\079\000\255\255\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\080\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\255\255\255\255\255\255\255\255\080\000\255\255\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\081\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \255\255\255\255\255\255\255\255\081\000\255\255\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \082\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\255\255\
    \255\255\255\255\255\255\082\000\255\255\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\083\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\255\255\255\255\
    \255\255\255\255\083\000\255\255\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\084\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\255\255\255\255\255\255\
    \255\255\084\000\255\255\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\085\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\255\255\255\255\255\255\255\255\
    \085\000\255\255\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec nexttoken lexbuf =
    __ocaml_lex_nexttoken_rec lexbuf 0
and __ocaml_lex_nexttoken_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 131 "lexer.mll"
           ( incr_lineno lexbuf; nexttoken lexbuf )
# 543 "lexer.ml"

  | 1 ->
# 132 "lexer.mll"
          ( nexttoken lexbuf )
# 548 "lexer.ml"

  | 2 ->
# 134 "lexer.mll"
                    ( print_endline "comments start";incr_lineno lexbuf; nexttoken lexbuf )
# 553 "lexer.ml"

  | 3 ->
# 135 "lexer.mll"
                                 ( print_endline "multiline comments start"; 
										multiline_comment lexbuf;
										nexttoken lexbuf )
# 560 "lexer.ml"

  | 4 ->
let
# 139 "lexer.mll"
                     slit
# 566 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 139 "lexer.mll"
                          ( STRLIT slit )
# 570 "lexer.ml"

  | 5 ->
let
# 140 "lexer.mll"
                   clit
# 576 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 140 "lexer.mll"
                        ( 
		CHARLIT (
			String.get ( String.sub clit 1 ((String.length clit) - 2 ) ) 0
			) 
		)
# 584 "lexer.ml"

  | 6 ->
# 147 "lexer.mll"
       ( PLUS )
# 589 "lexer.ml"

  | 7 ->
# 148 "lexer.mll"
       ( MINUS )
# 594 "lexer.ml"

  | 8 ->
# 149 "lexer.mll"
       ( DIV )
# 599 "lexer.ml"

  | 9 ->
# 150 "lexer.mll"
       ( MUL )
# 604 "lexer.ml"

  | 10 ->
# 151 "lexer.mll"
       ( MOD )
# 609 "lexer.ml"

  | 11 ->
# 152 "lexer.mll"
        ( LSHIFT )
# 614 "lexer.ml"

  | 12 ->
# 153 "lexer.mll"
        ( RSHIFT )
# 619 "lexer.ml"

  | 13 ->
# 154 "lexer.mll"
         ( LOGSHIFT )
# 624 "lexer.ml"

  | 14 ->
# 157 "lexer.mll"
       ( NOT )
# 629 "lexer.ml"

  | 15 ->
# 158 "lexer.mll"
       ( BOR )
# 634 "lexer.ml"

  | 16 ->
# 159 "lexer.mll"
       ( BAND )
# 639 "lexer.ml"

  | 17 ->
# 160 "lexer.mll"
       ( BNOT )
# 644 "lexer.ml"

  | 18 ->
# 161 "lexer.mll"
        ( INCREMENT )
# 649 "lexer.ml"

  | 19 ->
# 162 "lexer.mll"
        ( DECREMENT )
# 654 "lexer.ml"

  | 20 ->
# 165 "lexer.mll"
        ( AND )
# 659 "lexer.ml"

  | 21 ->
# 166 "lexer.mll"
        ( OR )
# 664 "lexer.ml"

  | 22 ->
# 167 "lexer.mll"
       ( XOR )
# 669 "lexer.ml"

  | 23 ->
# 168 "lexer.mll"
        ( NEQUAL )
# 674 "lexer.ml"

  | 24 ->
# 169 "lexer.mll"
        ( EQUAL )
# 679 "lexer.ml"

  | 25 ->
# 170 "lexer.mll"
       ( LTHAN )
# 684 "lexer.ml"

  | 26 ->
# 171 "lexer.mll"
       ( GTHAN )
# 689 "lexer.ml"

  | 27 ->
# 172 "lexer.mll"
        ( GETHAN )
# 694 "lexer.ml"

  | 28 ->
# 173 "lexer.mll"
        ( LETHAN )
# 699 "lexer.ml"

  | 29 ->
# 176 "lexer.mll"
       ( ASSIGN )
# 704 "lexer.ml"

  | 30 ->
# 177 "lexer.mll"
         ( PEQUAL )
# 709 "lexer.ml"

  | 31 ->
# 178 "lexer.mll"
        ( MINUSEQUAL )
# 714 "lexer.ml"

  | 32 ->
# 179 "lexer.mll"
        ( MULEQUAL )
# 719 "lexer.ml"

  | 33 ->
# 180 "lexer.mll"
        ( DIVEQUAL )
# 724 "lexer.ml"

  | 34 ->
# 181 "lexer.mll"
        ( MODEQUAL )
# 729 "lexer.ml"

  | 35 ->
# 182 "lexer.mll"
        ( ANDEQUAL )
# 734 "lexer.ml"

  | 36 ->
# 183 "lexer.mll"
        ( OREQUAL )
# 739 "lexer.ml"

  | 37 ->
# 184 "lexer.mll"
        ( XOREQUAL )
# 744 "lexer.ml"

  | 38 ->
# 185 "lexer.mll"
         ( RSHIFTEQUAL )
# 749 "lexer.ml"

  | 39 ->
# 186 "lexer.mll"
         ( LSHIFTEQUAL )
# 754 "lexer.ml"

  | 40 ->
# 187 "lexer.mll"
          ( LOGSHIFTEQUAL )
# 759 "lexer.ml"

  | 41 ->
# 190 "lexer.mll"
       ( QM )
# 764 "lexer.ml"

  | 42 ->
# 193 "lexer.mll"
       ( LANG )
# 769 "lexer.ml"

  | 43 ->
# 194 "lexer.mll"
       ( RANG )
# 774 "lexer.ml"

  | 44 ->
# 195 "lexer.mll"
       ( RBRAC )
# 779 "lexer.ml"

  | 45 ->
# 196 "lexer.mll"
       ( LBRAC )
# 784 "lexer.ml"

  | 46 ->
# 197 "lexer.mll"
       ( LPAR )
# 789 "lexer.ml"

  | 47 ->
# 198 "lexer.mll"
       ( RPAR )
# 794 "lexer.ml"

  | 48 ->
# 199 "lexer.mll"
       ( RCURL )
# 799 "lexer.ml"

  | 49 ->
# 200 "lexer.mll"
       ( LCURL )
# 804 "lexer.ml"

  | 50 ->
# 203 "lexer.mll"
       ( SEMI )
# 809 "lexer.ml"

  | 51 ->
# 204 "lexer.mll"
       ( DOT )
# 814 "lexer.ml"

  | 52 ->
# 205 "lexer.mll"
       ( COMM )
# 819 "lexer.ml"

  | 53 ->
# 206 "lexer.mll"
       ( COL )
# 824 "lexer.ml"

  | 54 ->
# 209 "lexer.mll"
       ( DIM )
# 829 "lexer.ml"

  | 55 ->
let
# 212 "lexer.mll"
              i
# 835 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 212 "lexer.mll"
                ( INTLIT(int_of_string i) )
# 839 "lexer.ml"

  | 56 ->
let
# 213 "lexer.mll"
             d
# 845 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 213 "lexer.mll"
               ( DOUBLELIT(float_of_string d) )
# 849 "lexer.ml"

  | 57 ->
let
# 214 "lexer.mll"
            f
# 855 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 214 "lexer.mll"
              ( FLOATLIT(float_of_string (String.sub f 0 ((String.length f)-1))) )
# 859 "lexer.ml"

  | 58 ->
let
# 215 "lexer.mll"
              b
# 865 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 215 "lexer.mll"
                ( BOOLEANLIT(bool_of_string b) )
# 869 "lexer.ml"

  | 59 ->
let
# 216 "lexer.mll"
           n
# 875 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 4) in
# 216 "lexer.mll"
             ( NULLLIT n )
# 879 "lexer.ml"

  | 60 ->
let
# 220 "lexer.mll"
                 id
# 885 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 220 "lexer.mll"
                    ( 
		(* try keywords if not found then it's an identifier *)
        let l = String.lowercase id in
        try List.assoc l kw_table
        with Not_found -> IDENTIFIER id
		)
# 894 "lexer.ml"

  | 61 ->
# 226 "lexer.mll"
     ( print_endline "unknown character"; nexttoken lexbuf )
# 899 "lexer.ml"

  | 62 ->
# 227 "lexer.mll"
       ( raise End_of_file )
# 904 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_nexttoken_rec lexbuf __ocaml_lex_state

and multiline_comment lexbuf =
    __ocaml_lex_multiline_comment_rec lexbuf 86
and __ocaml_lex_multiline_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 235 "lexer.mll"
        ( () (* unit *) )
# 916 "lexer.ml"

  | 1 ->
# 236 "lexer.mll"
           ( incr_lineno lexbuf; multiline_comment lexbuf (* count lines in comments as well *) )
# 921 "lexer.ml"

  | 2 ->
# 237 "lexer.mll"
     ( multiline_comment lexbuf (* a comment goes on *) )
# 926 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_multiline_comment_rec lexbuf __ocaml_lex_state

;;

# 239 "lexer.mll"
 
	let debug_char_lit clit = 
		print_endline ("char literal " ^ clit);
		let my_char = String.get ( String.sub clit 1 ((String.length clit) - 2 ) ) 0  in 
		print_endline (" charlit " ^ String.make 1 my_char);
		my_char

	let print_token = function 
		| IDENTIFIER(id) -> print_string ( " id : " ^ id )
		| INTLIT(intlit) -> print_string ( " intlit : " ^ string_of_int intlit )
		| DOUBLELIT(doublelit) -> print_string ( " doublelit : " ^ string_of_float doublelit )
		| FLOATLIT(floatlit) -> print_string ( " floatlit : " ^ string_of_float floatlit )
		| BOOLEANLIT(boollit) -> print_string ( " boollit : " ^ string_of_bool boollit )
		| CHARLIT(charlit) -> print_string (" charlit " ^ String.make 1 charlit)
		| STRLIT(slit) -> print_string ( " stlit : " ^ slit )
		| DIM -> print_string "[ ]"
		| EOF -> print_string "EOF"
		| PLUS -> print_string "PLUS"
		| ABSTRACT -> print_string "ABSTRACT"
		| ASSERT -> print_string "ASSERT"
		| BOOLEAN -> print_string "BOOLEAN"
		| BREAK -> print_string "BREAK"
		| BYTE -> print_string "BYTE"
		| CASE -> print_string "CASE"
		| CATCH -> print_string "CATCH"
		| CHAR -> print_string "CHAR"
		| CLASS -> print_string "CLASS"
		| CONST -> print_string "CONST"
		| CONTINUE -> print_string "CONTINUE"
		| DEFAULT -> print_string "DEFAULT"
		| DO -> print_string "DO"
		| DOUBLE  -> print_string "DOUBLE"
		| ELSE -> print_string "ELSE"
		| ENUM  -> print_string "ENUM"
		| EXTENDS -> print_string "EXTENDS"
		| FINAL -> print_string "FINAL"
		| FINALLY -> print_string "FINALLY"
		| FLOAT -> print_string "FLOAT"
		| FOR -> print_string "FOR"
		| IF -> print_string "IF"
		| GOTO -> print_string "GOTO"
		| IMPLEMENTS -> print_string "IMPLEMENTS"
		| IMPORT -> print_string "IMPORT"
		| INSTANCEOF -> print_string "INSTANCEOF"
		| INT -> print_string "INT"
		| INTERFACE -> print_string "INTERFACE"
		| LONG -> print_string "LONG"
		| NATIVE -> print_string "NATIVE"
		| NEW -> print_string "NEW"
		| PACKAGE -> print_string "PACKAGE"
		| PRIVATE -> print_string "PRIVATE"
		| PROTECTED -> print_string "PROTECTED"
		| PUBLIC  -> print_string "PUBLIC "
		| RETURN -> print_string "RETURN"
		| SHORT -> print_string "SHORT"
		| STATIC -> print_string "STATIC"
		| STRICTFP -> print_string "STRICTFP"
		| SUPER -> print_string "SUPER"
		| SWITCH -> print_string "SWITCH"
		| SYNCHRONIZED -> print_string "SYNCHRONIZED"
		| THIS -> print_string "THIS"
		| THROW -> print_string "THROW"
		| THROWS -> print_string "THROWS"
		| TRANSIENT -> print_string "TRANSIENT"
		| TRY -> print_string "TRY"
		| VOID -> print_string "VOID"
		| VOLATILE -> print_string "VOLATILE"
		| WHILE -> print_string "WHILE"
		| LANG -> print_string "LANG"
		| RANG-> print_string "RANG"
		| LPAR -> print_string "LPAR"
		| RPAR -> print_string "RPAR"
		| LBRAC -> print_string "LBRAC"
		| RBRAC -> print_string "RBRAC"
		| LCURL -> print_string "LCURL"
		| RCURL-> print_string "RCURL"
		| SEMI -> print_string "SEMI"
		| COL-> print_string "COL"
		| DOT -> print_string "DOT"
		| COMM -> print_string "COMM"
		| SQ -> print_string "SQ"
		| DQ  -> print_string "DQ"
		| QM -> print_string "QM"
		| MINUS-> print_string "MINUS"
		| DIV -> print_string "DIV"
		| MUL -> print_string "MUL"
		| MOD  -> print_string "MOD"
		| INCREMENT -> print_string "INCREMENT"
		| DECREMENT-> print_string "DECREMENT"
		| AND -> print_string "AND"
		| OR-> print_string "OR"
		| LTHAN -> print_string "LTHAN"
		| GTHAN -> print_string "GTHAN"
		| GETHAN -> print_string "GETHAN"
		| LETHAN -> print_string "LETHAN"
		| NOT -> print_string "NOT"
		| LSHIFT -> print_string "LSHIFT"
		| RSHIFT-> print_string "RSHIFT"
		| LOGSHIFT-> print_string "LOGSHIFT"
		| BAND -> print_string "BAND"
		| BOR-> print_string "BOR"
		| XOR -> print_string "XOR"
		| BNOT -> print_string "BNOT"
		| ANOT -> print_string "ANOT"
		| EQUAL -> print_string "EQUAL"
		| NEQUAL -> print_string "NOTEQUAL"
		| ASSIGN -> print_string "ASSIGN"
		| PEQUAL -> print_string "PEQUAL"
		| MINUSEQUAL-> print_string "MINUSEQUAL"
		| MULEQUAL -> print_string "MULEQUAL"
		| DIVEQUAL -> print_string "DIVEQUAL"
		| MODEQUAL -> print_string "MODEQUAL"
		| ANDEQUAL -> print_string "ANDEQUAL"
		| OREQUAL -> print_string "OREQUAL"
		| XOREQUAL -> print_string "XOREQUAL"
		| RSHIFTEQUAL -> print_string "RSHIFTEQUAL"
		| LSHIFTEQUAL -> print_string "LSHIFTEQUAL"
		| LOGSHIFTEQUAL -> print_string "LOGSHIFTEQUAL"


		| _ -> print_string "Something else"


# 1057 "lexer.ml"
